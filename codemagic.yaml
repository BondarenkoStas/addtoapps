workflows:
    ios-prebuilt-flutter-module:
      name: ios_prebuilt_flutter_module
      environment:
        vars:
          CM_CERTIFICATE: Encrypted(Z0FBQUFBQmVuaWlFNzBCMzFqZ3duV1hXNTRuX1dTek9sWUFMMEhUZzc5cE13cFl4WmhmRXkweW90SFU3eFJhUDl4Q0EyNkdnN3B1ZWxZUzhVeWcwU21CT3dpSTFUaGFNeVk1cEhQRHJMMG53d190NTBrdmsyU09aQ3pDeGZ1a2pkMUNxWjd6S0E2Mk14NmxxWWFYbVpwQzgzLVVhbW9MckJYQktRX2pnYTdyOEozcWFkN05wbzNnUlZKWGhxRU4tM0Nxd1duMlhoWXZ2bmZaaGtTalJjMkdrVXlPSUNqcDNMbklDeWNTcEdEcjNySk1ueDRNUDVHZTNWT0RUallka0RlMnUtc19wT3hXb01tWnR1TkluaHZ4RUFxN05QemhFeUw3TGlhX0tmSlhjQWFYMFFnM1BSTUNXekpxWDBZNXVhcm9USGdTSVpuNWhETnctMEVkbk04SXEtUy10cmswdjVRVF9qTTRkRV9Db2JLWEJtSmNhYUMtYUxpWlVwdzF0VU05RXhJMHktVHJNNnFwbUo1LXVTak5xanlVVXlrTVJQUHd0OEZoTURNakgwMkx4TmU3UVdSdDBhVXRONjZ3RDFEVFVIXzFMMzdETlZ5LTZzTDhFMW1odW9xNTZseTJXeUowczAwTDU0bEJwOERrNnBtRERvTzhKMnVxTmhzQ3dWbUxBQXN5aGZhSWc3ejJCMFZRRjdocndMenEyNE1NSmV3ZndueVNXZlFwMXRiMnl2M1h1eUNqNGx3aW1pQ0NXdm5wQzdKVHVIY2lnS1RneEpLMnVSam52SmxMMXV5SlVXR2YyZGFBRnBrTDhOb3h3TW0za1pscjYxb2ZJYnJJVXl3eUpVYm9IcVBTdlN3QzVCcE15Vng4d1BNaXQ2THhwUmFyUUxBZzE0MTRQTnRIT1NnT1c3a09hek1FS1BnaUxlTWprOGEyVXNmM0ZXTHA4OGtfNEQtRHM1aUNqMUc3cXlGN3JiV1FNeUdfa3NKYUlSZElsVkZETGV3QUMwckFmVVJkVXI4X2lPT2szT0x4ajNIem83TXBnYnotU2hhOEdnRkRBTEh3aUE1bFhHcTZFUmJWWHBJbTJ2YkdUYmI1bThjRjFQNDg4QmU2emFuLW1uT0F0NXJCSVJnVkxmLVhuSGFKeUVJak13S1VGb09BeVZLeTI2TFRNVE5JWHNZY3hWV2k3RXk2N3JjempOaFZmNUlKbFh2cUhRY0dhY3hmUVI0eU96OE91REpkQlZBMXRfZGpEd0hhNDFJNDFTaW5BZ1lQNlUwSUg0XzN0YXExSzNLYVJ1eU9PanZBS1psQ1Ixa3ZWLW4xYXYzazd0SUxJNkVoZ3RmVmRrQ2N5OWl5MVktMjhyV1ZPZXJ2SnVsZHRQVDlidTJqN0tfR285NU1HM3VTNTUtYy1sMGp0WEpKM0M5c29oQlBCT25GVEhDQmkzTUlPWWdsdUNSZzlJaGZNeTdWdl9ydFd0cjd2YUlQc214SU9lVjBFaTI0NEhfMmlpZ3Q4Q2RwU25MazZyMlViT0FOdWYxSHZkMnRpVTEtcWlZeWY3ckZqMzY1bWpPQmdvVDRIZmxoZnZnYXpiMG9DNEhIYjRXVlA3Z29VMFB1YVl3dzRsa3loTGs4a19RVUlGUjhLYkpiWldiT2pucHRQa0RrVndUdVE2OFltYUp0T2U0OXFzSUkzaGxrcFMyTUtleC1KeUUwRERPOW4tNGFkS09DQVZBREhpUVplekg5RHhyMUtOQkVVVTdnZTVRS1gwaDhYdFdLM0ZGSk9vUmZOZUFjbERMbE5nOHBWN0ZUZjdCZGViQ2JQR2JnaHpoRVUtbmNFRG82THJlN29MSk5fZ1BuVlVHR0pxOTFGOHFodVJWYzZEUGVveGFWZXU4OWl5ZGtLTEpYT0RnMFYwcDh5QVJKUXRjYkZCcnRPTEFOR0stVlJfaHNmN0Q1Q1Y0Uy1uT3RkNW54WEplNDllVWpLZjVoQTV2aGtQeHJKNm1Tcm16eXVRZmptNE0ybkZpMzB5RmlnakVWRW56RjJOUkh2NWh1dk5Nei1pYzFFcHZZeExORXU5WXkzZDdPZmZoZVVyQnNzY29lWVRhVGxUZ3JPQWoxRWVHMklVeFhVZThKQlVBUGpJbDZpMmJyTXVRMVRlcmdzcjA4MDlwNFFxeGRtUENLVk5MRUtaOHZIREdvTTZ0ZC1ZczViZjR0R093enllajZLVXF0TWhhQWxnT0poQmJaYVNpSWF6SjV0S0tRTmNZeXM4T0ozVVE1SkF4N21KdFlwc3JEOVZEeHJSYU9zYzVNVG1FQzR3UWRZZ1BoZkEwRWZrZFg0LWVUOWJSRDEyMlI4OWpIdnByNXFkRHhmb3g3SFp5RXNERWZURVUySU5HZTg2aW13Yjh6S29RRFA4dEdjd3Q3bUZvZENLcm5tdV9QOTZFeC1qd1pEa1JnVkxtbnNEMm1pWEd6ajctUDhBd04zUW94NVpWc3BUdHJjdGZCVG5lZjUxQzFRRVQwbHFxVlBUM3VEdXZ5YnRCYkhuNkFrZDhQbW1SVV8xb3FmZ3hkVXVaZHZ3MDl1dmRZWHdKbEk1WUhuQW55R1ZnV3YzS2FVR09xWVpFMC1ZMERVNVUtUGctQ3A2b2dEel9fa0huM2lWdjc2d3ZoRThaNUJ6Y18yenBRQ2pxeHlCcmRXQzNlSnhJRE5qTFlzWXdDalMtMWtCczFoMmF2MzV6OEhNaVF1QVM3dmdDZVVQMU53Q1VKZ3BZU0lqWHphc0h2WmM0U1RhQklwT3hXRVIxUGFVYkpZOGt3aUZEOUJiVHNGY3Z6eXBmSTVtSHZhblVGSnVfdC1PZVJpMFZRR290V3pyWWlNSk1pSXZkakdkZUNXc1hfTWdmZmVXN205d1c1VFRvVDloMklEazRTUTZHYzRnSUVhc3dPdVZjU0NPcjktaDQ2TzJ1OGk1SnNoeW1HSzUxakcyQWcyWmJXNUk4Z2hOQ1EtSDNnMWZaSGZuS3dqc01GNFZoamZSZVlPaU5iaGdwZnljSW5GdEI1RkFGWlR5bmF3RndnZGMxQ2QwZl93U3pZSDBhUVBKNHBHanB0djEtWkp5UzI1eVU4eENGS1dJcnc1cElkMlF5N3I2VFdudGpvc2VvU1NNb1FFMEFaSVhycEhyWnNWa3FSNUw3ZXllSVNCazB4eGw0cmEwTVllN3hCTUN0R04tcDREOWloeXRXTUJnc2ttV3N2bG1Qd3dxX1lreGdhUjJMbDdmVGF0Z0QwcklpQ2NVbmxRSVlfTUJwdXlNa1FsTWYxXzlzM19sdmJETG1nTFFQUGNHU0c3am5UdlhrTWxJazd1V2pOcmk2SFZsdVNaUk5JQ0Uya3V2ZFF1b01OdlNXNmcxSDJsVDFmWDJlRlNpb3lFN2xPQ19XWEI3eWFzODZ2ZHlzN08zSjlXdk5DQmdMRFN6NElLYUI3TTRCTno3SGtYSlY5akgwNHdUbnFsQ3R4TDBaMFVfQjlwRWFwLXozUnlfWWx2Vkl0RnlMWnBoRlFnVUtIRGxSUE9DLW9DM29xczFoaXpGcEYzTzF0TDFoWk13VGZCUmNyZzlpLTFEUkgxWnI2Ty1BSFF5R05WeEZkcUZlN2Z6VmpUTVljajVMMFRjdjNZcmRfS3N4emxkLWJ5TVU0eC1SOVoweVI3U1BvdFZGVTJNWk5RMHZSVW8xcEN0MnNzdHhtMHV6NzRqM283anB4VGx0bzJFaVhhOGV4ajZBeHR6TWd2Vjk2ck8zYnAyVDBreXR1X3RsOHQ5U0RJN2Z3cHBYZG4welgyV0s4Ry13X3EtaWt0VG9PU1V3S2VnSHBNN0YzNEhma2F5RXgyY3ktcGFNeVBNR0YxZmRlNmZvZ21yNnZuSENhQkNBclVscVNJbHRUNmdRVUFMMUJscmU3WVJ6TjNXTVZiWXBvcEkzU3lMdUxDV0FxZnQwTnlKSEVLdmNqaDU0TzFSTmxaa0k4bGpsQTZwWm51MTZHR1lSMHpvMDhZVjUzTW9CM3RkNERtQktwcGJ5OUhNdkFrOEdZekJnV0VaX2hLbHAwdGNENV8zZFZURkVsNHlsT0o3VWhvX2Frb2g2MmozbUxmRV8yRmJGYTRqUXBxOTJlcHFZME9vRzlfbnZRWHNBUVF6N1ZPU3gxRE5WakxMRkRsM0FnM01POXFDR0tjVURNeGRjMEtMS1VlVDVOOE9rQm1wOUt0UTZZM3ZCWlFiUFZsOGdBeHJkamJBcDIxX0pVbjlkMUp1cmNtZDZCTHY1YTVWVzRKSGVWb08xQjBSNGc2SFlySndqVWFTSlVhWm1oWjdWeEZCQS1Gd3BWLVdpckFmblNiX0F0cFo4WDdHWmpVUlpUN3FrZ214R0hvb2hiSTM0WW80TkhPaXUzV1JpWUplQnhTNnF1dUJfRVpHTDQ4d3JNc1lXQkZkSFhEZks1Y2JPWjFNZUVLQVhkRmswQnpDVWZBcHh3aWRfLTlCTVVrTUViYlZJZTctWUxqU2VhR0I2UEoyZmZ5U250T1BPYy1pd2duelFUYlMwcHVGb0YyN0hOV2xBcHVSSUtod2IzQlh2MFdab0M4QlJxVmZDQktmWi1iSG4xdjFfMlh1T2NmNUMwVUdvYXVSMlhYZGRCQlZieS1TVU5sdFhwUGpQUHRNaGZVVDdCSVdGVlMyZHgtNmYtWmljUjZGQVQyZUdXck9mbFZkSUdOaDk4U0loVExFakpSOWZqWm5aRmY2blN0bU9zQXJ4YVViUF9zVFh2U1pGWmVleElBQ2xPMThReDBDUTVUbGhHS2dtTVdBSGMyR0JEci1mNW55VnlYcVpaTWhwa0hZYmNyZDMxQXYwbjRFaTJtUkllVXRTamFfcWNSUk00dC1kbVRiaG1fMkZNcTlBQWlPQ2haT1dCQUxiZWZ0MGRVUWI0djUtaUtUV1pUVEhMQk5yUmRUMjBWdXFCRG5hYUhnQkU5VHY5UUtNUngzRjUwWHJ5OUxvTWNnOVRiMlFJNnozTEVuTl9PY3VBTEp2R1RuMW8tWEI4T29UVUdRM1c1VVdwSnVweHJnb0FNSUxRUUZrZzNuT1FaN1N3bm5PN2tsYlhCclc4TGxyT191cVdUZWJmRENKMk9CSUN6NDF3RFVhdHo1aDNwMWNjdEJhTnV5elg4WExRWWR2bnVaZ3lzdnFFRWdEYWZEOGlEZG1wOWVsMEhvZnE1NTB5N01uVm1nZDlQTmtWT29kTnBtaUNTOWEtSTRYXzl0emRMWDBrRm9YdC1BU19WRUIxNklLVFp4NFpQaUN0SUFFV3lIZXJVSDNEVkJ3T1Y0d2ZidUhjd21OaVVTLWdIYTZaU2c0V3NfTXo5RWdJU2IydERGOXhVck1rUm9SOHpIdDQ3am84TEptOUk3aGdmcDEyOFhILWVFSVpBMERqVUhUSGJveGY1emw4Rng1anBLN09xLUF3MmdQSHE5NG1LWl8xQUVFalplNUR3WGw1OEhjemJ2OFNaSUk4YmVLY3R2YUlMNmROSk5wSDBxOHVhVEJRdFpaNnJSdjBKVkhkdU1VNGN4cEhNNUtCcEY4Njg5OE9ybk5MM1BTQk9ZUTNwMU1JQWFRNi1BQS1CYU5BdEsyZjZWSnY5UUxiR08yUjY5a1lucmFRVG1jVEl5Rm5yYWQ1UTRlajZNR3M5UFlPbVc4dWxiNHgybEFjbC1JTUpTV01EV2d5X25kbEN2azNHQVlHbVhSbFBfYjlNUEhvb21fcXVLYWxwNGpJa0ZLNURkVHI5cFhidVJzVW9MUW5Mc3V3QVEyNVFUd3dxaEdOVkNfbklmNDc3c2VKQWVGZ1BROWEtQWlkWW5rWUw3T2hDZjJ0cW1CSzhEcDl4eW83TndYcnp2TWd3dnQ1Uy1EUFozLThKY3BWMnNqcFJHZ01BNWR6UHhRREJqbHp1S0I5dDhuaGFpNkVHanlkQmZRVHNqZU02YUo0VVRCYjBIUC0zdjRLR05FNjVYeHJna0NsRlhMdUotaXBTYk1wWW5tZGFNRHhXYXJ1VlJtS2ZQVWZvR0p4YjVjM05hVkpPMWJCM05WZXRrOWNPVFlUT2lmZ1h0czNIdkh3RXVjMEJrSjRVVlhIaU8xbGZoVzMzX3JNRG1nN0ZVcHpoRmhGT0hFbFV6ZFhWTFoyZ1UwSHNSd2NFbFNDV2x0VjIxeExSNlRpb1lPNGhNRjJKMjcxZUxCeUh3Z25wdWZMY3R0bGNOdmh2dWFQRnU1MEc2cFVIcThHV2RqRlZYYUM0U1Eybmx1anZxQjhOM2l2OG42cWM1MTNTUzlaNFItZFdJMU1XSDRoc3pDMnJXX1pvVzlPSExwUmJKdk9JZ1c4V1d0R1UzYjJRek4ybHZuaGxBbU54LU1NMkxvRlRyeGIzOGcyTi1RVXlpZG16THZlVnJJOGhwcWt2MGNBZjJBRDkzVFBySDAzRkZ4T0lSandRdERfbFA2ODRzMm9PMU9GZ0RMVmV4M09SVkV0Z2pWSDE0bERQTUY3a2xIc01wdVpRdVJTallza1BRcVh3NmNKVUpKclB6ZzF2N1lGNUUyYVVpMU1JUWtZeHBOX0RvS0pxRWdNbk9kZ2pGdkZqaFBJcTZVX0hFVDlwU0o5cDQ2TENYVjFzaDk0UmxZYXkzNlZTRnlkd05HWmFoZTdKM0t3OXpUX0QweGRJbWtUNXVHcklrNTB3TXVRVGxiMjVvQmZBeEEtbWtxVWstRzdiLWVIaUZmeVpDaU5kaFJxbWdDeG5fbGNKU0xicHpyMS1zc1BqX3FGVTlEbTJ1dklqcXZrckx3UGJ5Zmh5YXljWmN0REtXY2VNbHZLZ3Jocm9ONmhBSm9kbzhPSDNzMk5KUmRmbGJjWENzOXRkZV9UeGJMYmlUMkZVWlNZUmUteFF0ZGtucjI0aUNEWklJemE5U1NHU1JQcThUWm9DdkxBRGJxTHJsYXNEQ3B2ckFOM3FVZTdjREhvNlRpV0o0MDFGZ1JXamZkQ2w0bXl0SGVqNi1XZGlhdFMxaUNlN3E3RHRzWjNrLVp5aVFKak5RaU9RUUxIQWlJRlJNUDJVLVlhUU95cXdoQkZLVXdRMmR5dTFyandmQXM5SzV0dDhBVWhoQjJvcEdNRXFMQWVMc2VpY3cyTE9DUnFUUzBoWUJVcHJ4OFBnOHhQQXZSc252QWVwNzdqVWoxZlpmaVBtTC13NnZnNjhOZHgwZlFGUEJFc3FzLWFsX0lLekxCb2s0dFp2WHVwRWtQUGliTkpPM0tlajJmTmhLSWxvXzJQcFJSTGlhbV9aeFF5cUU2WENBMnp6Nno4dzhrVWlUYXVBb0FNWDFuQllod3VpMkE4ZElhNGJUcTlTa2dsYXloSFVhZmNkUll4NVdxLS1xRzRKTDZGcEpIOXNReTB5N2NfSVpYaURGRWVLS3FFTmxTcEZvS3B5OENQc2ZmMjBmaEZwWm1UaUF1bUkyOHRCaldYWUtodEc4TzBkZlo1a2M1SUtFTmN6dWJmMDJfMEFQeGx0RDRpS2FIYjAtRkhZS3ZzYWVYQ0MwOFo2eVJ0TnRDVl9zbEZxUG9oU3gxSUc5U1pvWnVpX0xyRHRDc1MyMTFxd1FlSVZ0YkVpQVlUb0xQalhvSjUwUUxKeFY4VDFXSjh1cEJ0c3JCR2lydFl6dEVuSVFxLXBqTmxMSG14RTUtNzJjd3FGMjJKY1JDSzZ0ckhic0F4am5hSVFlUT09)
          CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmVuaWlFNzQyRksxNnUzcHkzUExLdGZ5VkJQbHF2eFhSd3BLZUNfdWR0WkJDTHRJYlNJYmFBNGhnT0stZVFJdWhCOVgzdGtNNV9HbzVORmhEN2xaeDQ0bGdNdmc9PQ==)
          CM_PROVISIONING_PROFILE: Encrypted()
        xcode: latest
        cocoapods: default
        flutter: stable
      triggering:
        events:
          - push
        branch_patterns:
          - pattern: 'ios_prebuilt_flutter_module'
            include: true
            source: true
      scripts:
        - keychain initialize
        - |
          # set up provisioning profiles
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
          echo "Saved provisioning profile $PROFILE_PATH"
        - |
          # set up signing certificate
          echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
        - cd ios_using_plugin && pod deintegrate && pod install
        - |
          cd flutter_module_using_plugin
          flutter pub get
          cd .ios && pod install
          cd .. && flutter build ios-framework --output=../ios_using_prebuilt_module/Flutter
        - xcode-project use-profiles
        - xcode-project build-ipa --workspace "ios_using_plugin/IOSUsingPrebuiltModule.xcworkspace" --scheme "IOSUsingPrebuiltModule"
      artifacts:
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log  