workflows:
    ios-prebuilt-flutter-module:
      name: ios_prebuilt_flutter_module
      environment:
        vars:
          CM_CERTIFICATE: Encrypted(Z0FBQUFBQmVwdGIycGc2SnZzRk85MHpNN0dtMGphS2lnRjRFc0wyZkNVSjhYTzkxZ19IS1VIRlc0aS1FVjRGR3VrbzBXQ2J5MjFQNXdkOVBwakgyTTBYcURPRzJMZ0JKNHhDYnJLMUlLRWxsSWNKYVVnM1dmX3M1ckJGdkpraFVtU1AxZHRfY25yd2NnN2NycFNJbGRsMHlnemZISGlXTkNEcFpGdXdPbWhOUXZRMXBjVXlQN2t2ZWxUTnpyT0QzdnVkU1lzRmUyRkVMdUJESUJ5bVhUVHJGRVdVdnBTRkhfbldXR1Z0bXVCclY5U3pBaFltenN6WWZfNTZwaW0xbEJPdmludGE2dEpsOV9lNDNzUDRRWTdYMmdydEt3UnpuMy1zMkVVdllLMXdiX0JJVmhzRGJXa3B3RjhlZ0lQQWkyTEluTDcwXzhWY3JFWkZlamlCMS1wWVIzRS1OY1pqaE9qSGhLZFZMMEMtTVByc0htUlRxdGthY01tUGFDYjN6QzJYVGQzN3p1azhiaGNTc3hlemh4bVBLQjctanBtb2c0MGpBM2tBTXctenVIV2dLcVVfVjlSQmFIaVNqX0NaZkJQTVh1UFNIbE1ic1dacjh3eWg2b2FZM0JDNmRPTG0xVzBkLXZQc3hrSGNyQkZzeHctX3RoblpqVHJISnVPZC10VEdFcXRKckFjSDF5U3NnWVJJOF84TXlKWDBwaWFwNHRKNElhZEhtUFgyQmVqcWlFQ3BaZnYtT3BQal9fVlNwV3lKWGl6WEtMRXppUkJnbE5VVE1oaHNaTTQyNVJrMXMyenNSSjhXUFNSMkU5TjNteFpOLVJtUTg0eS1MNzV0UG1aWEtNa2hEdm9JTk5kVzMzNEI1d3EzQzFXNUdTVjhfTzVWUGc1dmtYdWdOUFB3VnZBcHdRLTlFZWRYbHpSN1VXYk1taHN0UDdNMUlDNmV1VHdoQ0lMUXRmRlJFYWdHc2E3VnpqWXZINjFrOGlDSlJJZ0owQk9aWTJSOW9DVDEtTzFMWVhEX3N4Wi1KWW1BSS03bXN4aS1Dc25JVGhWVFdxaDJicjVVMjVPcEc2WTB4eENoeEFYc0ZQRFlhXzRncG9QRzVnS1lyekxhWWJYMXlzbC12SDgydVdHNlpXQlFEQWFMRE5LT1doMS15ZlFWamFJM0pNV04zVHcwcXpIcHJSMWsyTWNzY194amt5ckRtUUg2WUljM29GN0dzeE1lV09raXBPN0tER0wwMGQxcXJUUFJhTTY5VEtwZ0V0eU9KQ2VjYTZOWXVKcGpacjJqQm9rR3JQdWVlMVBBTXN2TlloVF9TQW9MbHNmMFljYzBRMGttQzBrakY4enVteTVrQUxDMWljdmhrSVZyUXZwRWw5T0t0ZVdSby12VkRFT2k2TWxnZEM0N0FqSC0tMDlidFlPLXRPdmZZSm1Jcl9sWHNWSklMY1JHY014Zy10V1dFeHJ0QXo3OXRmX2pnZC1fTzUxY0ZQWHpEakJBZzBucFJTWkhfSVY5LWRfTzEwV2Y1NFBObjllcVZ5ZENlQXd6dWdUaVZpY0t5LUVWcm1rNDFpRDBibTl4cDhJNzJIYmVjRGNOUGttWUhidGFJTDFUU2RDNmVmUC0xVHlMNEFESmhtbHdxbzY0cTk5dG11emVfdUJ3YXozTTNsa1FQRDhYbFV2UTliWlNhM0dRSzRDZXJsX095dm41bTllcnJlTTBfV1JERVBab1hmT1VWYWdNRF93OGhhRXZCeDI2UGZUbk53X1RZd1k2aDVXUnREbnd6RnlSSDN4OW1MLTloMmJ6Zm1CbHJNNWlaSW1Zdkg4WGZ1VmloQnJZOXhrRkFiaVRkRzc2Ty1rWXlBdjg4X2ItTmp0ajB4clFxdUhOOFVBOEpVV01mcEtPYUhQenNmaWNpRzdRU2xHWElLTUdoN3lTeDV2cFB4YUJrYWtxX2VQNG5PWkg5ZU94TkxuaXFBY1dLNUE3RVB3Y1BtVTBLUnowVVF6LXdJdVFCdS1UUFdoZHJEc0dqM3RvU29SRnB0c3hOYUZMcEZFbWpyTU4tOUZDVjJWODBNX3NQcUVuMVBuVG9YaTIxTHFrZUNvLXBMeVdGVnhmWmRXZ0xsYm9tZE95VlRlemdmdW50S3FTZkZ3cmJaQ1lqZXlQWXZNZ0R5UGlJVXdLQ000eGxlanJtRHJyeHQydmpKUDBGZDhrRW5jcHBjMDBhdWplRy1KOUctaVFadmN2QkxfWEt4MENndG9PQk1oMTVlMmFCTWpMaVA5LURiZUhmT29Lbk9iaWxDSkpLSmExZ0pyTmJVaUtfLVhvUWVfX25qaGVkMkxCbXh4bWxhQmk2OEIyMEg1d0tmNzNkLXVPQVktTm8zUWtYekxiOFZPamk3RGotU3paT0ZxRFB3X0poczBrOEVxeGMxWFpXQy1WZERZS0I0RFlMVzNVd2ctMGtwb3dqRTFlOXVIQnZnZ1NSb3UtaG1OVjMteVB1OTZVSy0xb25QcG8tWHR2Z2hyUTFNaTI0bWRoSkVHaWN5RHpXUnVjMjRqOUExR3NUbEFjN244OG5fcElmRmFhNFVjZWl1VVRITWREdFdQMlFhaGhIeGtWRm9wYWZkVDRsMmV3R3hra2JERkt3Y2ZPWG96YmVYdHFtQ3hjMWNfY3gzWE9aSmtQa2FlRzl2N25uMkpvOE00WFg3UG04dndtSnlneFRGc20xQlZ0YVU4QWk4Wmx5X0Y3TnpLbEtDSTFyOHVBSHptVXhWZ0pTOU9ENjg4V3o4NVhlVnpzYk9CMW9UcFlKcnlTd3NmdE5JQ1NzX21WUDJfLV9LZkg2NU83ZW80VV92NjBIMFpLb1Rnb1A2LVdfYTd3NlI0d3ZROE83QmxkMWFrUjNCQ3daNFpITVBIT1hiS0FHYmFlZThac3FOY1VENnBQRW1ybndwb05tc28xOF94eHpEcVlXeVhGakVFenAzTFkzNFF5MG80eEp2VDFPbmVMelV6QklTcDlidHc3a1ZaOVFRME50WFhIX2FYZFltRk5Fcml2a1o2RjB3MzMza3lTUDAxcW9jSERvb0xfSG1pc2RycGlKZGJIWkRnNXN6Ym1zZzlSc09Nd0lyZ0hmc2kyOGhHMTBiRkI0TmZ5ZGJ4SmxmSHhqUkxfc3RLTUFUV1o5VmVNOVNrQWpGdUQyTjlHazNkdVQtU0dBVUFZVUJtLVN1TEtkdGRrV2lFWWJpdW91VWU2Q1QtOUdPbWJFQlNHRFpMOWhZOU9EdHZNbkhjZUhEcFhSYzloLW8zQmRuMUFESDNyOGNSZlluTzVTWm9IZmp4WUdVOVpqenhiaU9nQkFwX3ZkQkcyRENXSnFadVExZzVqSzh4VkNxbnFxdG1hbW1YRXUzN2ZCQml5NDJwZEFsTVFsTFRxVGZVTTRYYXlvTnV5M2FYaWJWelBsTGFlUTVGYmk3TVpTVU1pdjJPRlM0TU05Q3BuZHhTaEg3ZFh0a2dpMTk5V001ZmJXWUpvQmhZa2RVdjhTWnk3T3VyMEJ6dEhsV1RyYjNyUXNNeDE1aFU1OWczamEtRlRmdFpwNWhzS05kRC1EamFEWUFEYktwbzNHcmV3Mlk2VUJRRUJ1akpEcmR5YU5ESGlBNUlFSnd4RlVDcll5SWpQYUYtUlZ2Sm1NZWduMFdKX1JoSDJ2T0dlWTRnUE84djhXMXA5MXBtTE01ZUVJS20tQWhDal9zS2U4SmdFUVJZUjJYaFRYbnh0cUdyN3dKSEhRSUlGQ2VuYWdlWmpCcjJnTmJMZTdiMlJwdHI5dG1FWktkcENCVmtoMXVPeTVHazl6NDRaeF9pekQxVy1tQ1pOMzRPUlpWYzZrY3dkRkUzd3lYRnVOVkVjUGs5RmFrbWRJZUo1RWxhOVZ2MGE2XzN3ZEpVVS1EMFF3V0pXVkJDbWFteC1ZTUNnVGZWVlAtcGt3UU9wSTJzN01FNk8wM3JUNkZqbVFOOXR4ZWhZbXRMYmFXM0NEUjdPSDlXRWFkeXhnX09ZYUhsR0xhZE0tXzJ3TXF2MTJGTVZQdkhDWTFRR2IybDk3Q3c0dzBDMDJMMHZUX0hVbUNBTllaaWVPX25GSENXc1ljY1pSaENnRTBZOWlBcG9ES3RqYXlKZ0xvLU5oY2dKZHNGXzRsZVVTclZKR2tJT0pwQjZJNGRhMFV4QURIdk5ld3Bjb0tOVGRyd2ZBVlNZenp6TW5LaHZ0dDJFeUVTa0ZaYlFkdld6SUJsSDFvUC1velh3emo5ZG9iczI0cnBmdXBfZDQtV1lEQldKUERwWlVQYkJkODIyZmxyUFlINHBzVVZVbGNNUFhXUkc5YUxiZXVNLWw0cVdqa3VNVU42aHhNaG14eW1xQ3RfVUx1cHE1ZWQwUmdwUlJSaU5USmR6c2VjSS02ckRGQ1QyM2M0NWxXS2J3aWNPb3U5MXZ6OHFacHkzcXpwaGxVbGRJVUFsUDBrakE0bDR3d0p1OEd5N2xoTHZhblphdnFYUmpzdm9EblI4SHBxUWFpekxrUHBYamdvZ0xaTy1Zb29ZZnd2V3N3M3o1Z0ptRFBOVXFPWjdSYzlVSUR1NHN5Qm0wa2FsT3dWTDRqV3lkVUpqdGlocUdYekZER1ZvLWtQSElyWnhBQkdkMmlqQm9odmVOaGY2YlVOem5BZFM5VWc4ZldON2RaU0hsc29FcEdLVzh4bjRNbU5pZ3pOV29QZFh0VUs0NGNMZHhONVZweFVTNXo5aXoyR2dqRXVnSmpkTlYtd3ltekRtaFB0dDhaRGRnem1MQUF2cEdjMWZxcTlUUHZJSlh6N05Ta0VNUmE1Rl9XeUJMdjJPLUUzZEF5eXUwYmNrQ1FDQmdJeFJsbEYzMy1Yb3UwMVhyblBwMG53Y2RheDdBQ3FVSGJMR3lub29tWUQtZExZSDRSUWxGblRNYUp2VmlodHdKZS1YZkhEQURVSkJDcjRtalpNX2U0ZE5aM1Voemp1aEFBM0trWERHd050UzlpTm5qNkgwR1UtZWxfeEF4RzhEVzJQVV9ZX281QTBHZ0tRMy1XS1pibFA2QWtPRUVLck1kQ2FzczI3cFVsY0VoSWNnVU53aUY3QWVIS2J6ZEZfS2lHM1kzcDJvWUFYRnFaLW5VXzZwbDJjWF9QMjRyT3A3ekJJVmtMRlpVYkVGdmJoaWc3S3NMNDh2TF9RM05UU0RtbVFyYkNDNFAxd21CeE5rLWd6RFNIYkNsOGRSLVdXWXRsdHJ6ZzJSN21vWVJiNnRjbEJyQmVpRG5GMXJDYVdKTjhSSXV2UFlNdVl5NlJYdEhvSHhkUnhlalF6UDBQZk9oTHktTDgtRUZReDJKT09lWW1FYXlNU2FOTmloakR2aUdTQ1o5cEZsTEdUdEk5ZEcwNTh3dURPUDFyX0ZObFh5dHFoWkFBeVQ5b0lYSGoxV2ZBYkZyWHp5bUNKYWowenVhMUFVUUJxY3RlOEU4RXJkTTczRWtfMlhmYXA1cDN6elZNYmMxVXhvRkNSSEZHcUswZk8yV1VUQnJ3UkppWFpZc1Y4T2pJbHNKSllKYmg2a3o0TUYzYmJpdXZfcGZCa2NGaTNtS2hON0VqVldOZ2RmWkRYaVVXaS1KeXpHRk4wWDYxU2VrTjRUcllGbkdoYmx4Ykc3N3lqT21KeTBEZ1VWdkMtVldZOE5QaTlUb3Nmc0JDXzVqR2pHQ3cxdnBaTWZuY0g3VGV6XzFQZ29xOFV3bmxrTm9XVEw1QVdHM2t3SUE5NkVWNjUtQ0NRNnpHQWxnLTZVbW1wSUF3RTZyQUxsS0RrTHJPQUx3TlAtRDkyTzFZdTJjRFB1d2ttX1ZTajMzbnNleTJlTWZkRnVhbDM1cTRNUWg0cTZoN0kzUXgwLXNiTERlZ19qdW5DRDdwSzg5OEE3aWgtODc2dXVaSUdrc2pRcmFQYmRhVFh1US16UnNTclV6LUpSZDRPUGV5MjA1UzhndTNWMlUyUHg2MUU0dTBfeUw1aWdvdnoxVTNJZVNKdFIzek5IY0Ywd0VVZXhxVmM0TDUwMmZYSUNRcjJqUFFQTFpWWGpxaGlGVTN4T2wyVTRpU3J1V1ZFVG9aMmVCMGMzZklua25VUmo0MzdZQVNsczNqYjEteGxVU3A1ajg1WTQ5ZTZEMGFuT1ZvdUZKamNzRHkwOVFtX2tsTkloNXlzN1BxeFZ6WTB4YzZWWHRpblhVaHNHdDVWZnRUMEI2c1pjRnZrSlh5emRNVF9EYUtxQXE0X21KREtzZm45WU80dFhhX2M4QXBYWHJ0Y21RUWtYODR4eUhIU0dTdjltTEJCaXAzOEdkOEtscFhNTGI1S0lnekdZaUtONnNWMXBTd01lbUczbFZrdUhIcHlBbWhvNkhPaXkyeHRuM0xZNUJDTGt4UmdNUm1LMkdYdWF1TVBtUGNpUE5GaEdVWUQtaWFUUVQtbDM0UUdBaFVUXzJ1T2prNnRsTnNrSGM5TjRKV2x2akh6Uk1EOGFRY01aUjNhUGJERWNFamVpbmRJRE1JM29oSlk0eWhSeVlna2dIQnNoNU5ydWhXWmR1MFotbHczUGozS1MzRnBaZkpBWWxjTUNUcHlsM2ZpMVlPODBPSlhJSTAyMzJiZFNKNmVlQzBmcjRYblVrQVo4aDZzTzlzTUJ3TkVXVDA0Z0FZSFota3kxNjVPVGJ2Q0dsQzJHV2I4N2tYZ3NLbnhVZW1GX3dvUUNTRkl3azA5MG1aVFBOenNtN3VTMTlWdFBzNEhKV2dQaEtydnZHa1JsOG4taVlOVy1ONFFlUnZ4U05tWEVjbHdIcm02aUpLZkhCdTBOaTI5dkIwNGVpNmNyMWJ2WGFhRFQ5ZG5SN0hQSDFWQ2N5YW4xam05SnVwTWdFSTJLRWlrREFsblY0UlZTSHRWODNKV2NoM3p6QWdDOWxubElVUEtWLWNuVnpZbFJXcUNmLWk3bEs5bVFTT0ZMVFk0VldobVVvRmFkRUlHMVE4QWdibG5CNUc2WHhMT3ZBMDhhQ1dUSlNnYVlwR3lhMmNUcDQzcmVWamxPSkFJSjMtcFNvREJURjN3QVBDRks4RkVoNVAzZ3dURGNGVVd0d2N3U3pNUDdsZl9neUVkVmROQTM2akJCY2lFeFZkNjA2NmhhaEhQSzc5MHJjOW5iejZTNE1Bal92SldLWUI2dkkzNWJwemRVbVZFQS1LMFBQQnJVakpnUEdjbjZCQV9mbllvNldnLXRoTGVFd01xV3k5cmNxSWJLLTAxWDB2d2FDSzdpZGQwb1dnMzM4cWRNU3l4cVpxMms4ZkktY0xOLVFPTkNvTkJ4bEtyQnFpWnBmaC1GeHo2eGtwMm5qUC1pZGJPZnZqbVpadlpMOW4zRTVtUFE4bENYY3M3RTJ2VjRQcFNQOENla0llWDVmTVJZR3QwSTQwYUxpdGVGRWtnazNPSDU1RjIxdU14bDJxSEJCSXY2Mm4ybW9LWE5iSjdPLU92cGJqV0dwUVBFWDBYcVlqTmtITjFURUVpQmpsdGJfMHBmbHc3eXUtTnlOYy1SaHZYdTNNb00zUkZ2V3ZXMkNlWUlqaDQxeHBOZXN3WXljcGxWU3dNNlpMZ3kxZ1BtNVMtc2I2SnFUdUtPVUc3Zk1tQVJPaTV0SHZnUWkxY2RBZ2VpRm5Uc1Q4OFk5aG9KUkhRSk13bkVoT1NXZW1NSUdPR0czX1htYzkzVWttQXR5dlNMejFjZEJDdz09)
          CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmVwdGIyTEFiZjZ4N3k0dWk3OGxCLWFMNGwxcjdBcHNEZ213ZEZlaVlOYmFEcWR1b3NpX0VYWm9xaExGcTN2M2R5YlA5V1RPY3ZTSk1lS0NEV1kxazl3N21ObVE9PQ==)
          CM_PROVISIONING_PROFILE: Encrypted()
        xcode: latest
        cocoapods: default
        flutter: stable
      triggering:
        events:
          - push
        branch_patterns:
          - pattern: 'ios_prebuilt_flutter_module'
            include: true
            source: true
      scripts:
        - keychain initialize
        - |
          # set up provisioning profiles
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
          echo "Saved provisioning profile $PROFILE_PATH"
        - |
          # set up signing certificate
          echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
        - |
          cd flutter_module
          cd ios && rm Podfile && rm Podfile.lock && cd ..
          flutter packages get
          flutter build ios-framework --output=$FCI_BUILD_DIR/ios_using_prebuilt_module/Flutter
        - xcode-project use-profiles
        - xcode-project build-ipa --project "ios_using_prebuilt_module/IOSUsingPrebuiltModule.xcodeproj" --scheme "IOSUsingPrebuiltModule"
      artifacts:
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log