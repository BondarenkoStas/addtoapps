workflows:
    ios-flutter-module:
      name: ios_flutter_module
      environment:
        vars:
          CM_CERTIFICATE: Encrypted(Z0FBQUFBQmVuaUliVHc5QzZKMk9uai1fZnNHM3hUWFN3dEJ3Y2NqZFNpb09QM0w3SHdPbFg1MjlKdkdPUUlHREJqSXVkbW9ZU3JaaHIxZmRiNVgyLXpMc2trNnFscXJEc1dob3pySGI2VHVwcG9BNzBrOVNsbldVRmVrZ3RUZEVoUktQNkFQTm0xVGR4R0tyTFVwZzcyWWRmQ1RvMm1zclhwV1A1WVlfSG5OWm9RYjlGcFIwVXFGQUVOWEhsZnd5dGNaS2JzNlkwOGtsRllVWnY5b0N2bGtwX2FGQzJxaWtXS1hMd2Q3ajIxSkhSVml3WkFOcmt4NlRKMmx5VHRHcVN2a0ZHbHp2ejMwX3M0SGlWeU5Fc3NoNVVWX25SMm85eWQtd3BNY1p0MGpNaC1wbzNyeVNzQkdrdjZMalFFUzlkdEVqSjZITlZjd0xqZldkRDBYU0VBLVpGSjg1Mkg1OGFJVUVBaDJyUDh1TU5pZ21ocFJkdkcyQUlzcG10b2V0RjBLMkU0cDFTUzJMZkhSX3E2OUVQVzdLUnZPU3ZMT01pSzJacktFVHBrcW1qYm41QWhLUC1xbUk1Z2NtQ2d0cmVQLWZOdjNoVElKbktkSHRaMU1wZTFTMlRtdk9pUU1Zd0pkbHNodzdkTDFqVDVzVlpZRFZ4S0V1d1FvOUVCNTZJbWFUWjNHQkZlU3pXaUxJMXkxUmZaV0ZGbTFYdVQ4ZGh6RjFFcC1yakxMT1dSQXFYZkxNVldHWXktanRaMDQyNDc4MExQSjlQRjliYlBmakNCMkZTMlF1Q25uWmN0VkR4djU2aDN0RDFzbFhCN2VUZUllY0pFM3I4dE03aWR3VkRCV0YtTVNPY0dycXdJcjRUczJ3Rkp3dW1saVN1dFpfOFZ0YkNESll0YlI5RW9jeE9NbEVncENpV1JkakNoTlVRdmhhS3djQ0RlV2dRNzJPZkZoZWtOQmozVE80V1QzZ0ZkWXFaVHdyRkRUX2R0c3MxcTZGRTNaNlRfQjFpQWxrRFlnS3pKMkhERVYtTVlEbHJEMDA3UjBtUFFzdFBlVG5PUXcxMExFOVFqOWhSeFJZMUVmN3dXME1xX2V3amY3SF9pcGVVaHNfbl81M1I2UVc2NzJKb2lmVVJDd3VXaXd0Y1BPWlFlM1A4OWZ0dzEzcTVVbFl0SThjWlQ2QjkweVNSNlpvYU9RWjdldktKclZpVHpYeUtza1dvOVYzSnE1RjExdFZqaHJwaUNOZ3RRNTFSSVhyNVpoXzU4MmZjYndvN2JyV3BLWlRvRHlPeFpGUkw5SVAxRlVkN1JycGlhd2VtODdqaVFnQ3lvdHlNbXRISzgwUnlKRGdnUGNDV3RUVXoyUXRuZVNCZGtFc3JHOTlKLUpOWklOQmttRGk0eTFHXzJfQ21GckNUYXVGZFBlWklYc3VoWDFjYVhaV1REdjZYSjVqb1VNbkU3RkkwM2t6VklMc1dtNUpadURlXzRKeTEyVldENFBqY21WUFRDSWRYODAzMzNjN1RIUm53UmI5VU50cGhJNE1WTkxPTHg0dXV2cmdyOXp4Q2ZVbUxUREpKS3JBR3FHcDFvclp4alB2Uy1QNUJncFgzR2lWdE5wVnB2TDg0Y256d1J3a2hUUWNTS0czeGVMaXRRc21aUlFXSnRmc0wxRXB3ZjhKV2piSkYxUW8tMEJmSnNrV3ZaWDJySGhJQjBHOW9LSTM2NWNaM0N4LW00X01PbkpncHdhcGQ3Z0lZU1lyNlNiSjVNdngzSUVGcDBFVHFDQ014M1BWdVhpaF9jRWdzcTAycHRqVFUzU2t4TzVZVkVXVnprb1h0anZIX0N6Z0RyWVBWcDg2TjczMi14MG0xdTVfTnlXWk9XWmJHM2tnM3QwMU1aNzBMS0pCOXJPV3pTTVpteWFNZ3VPLU9TYmhEVVB5UmhjYjg4c3VmWHlHenFVSFNvVmg1OGJhd01scmFJXzlTblQ0Q3pDbS1MVHRoTkp6Nm9BYWc4OXAxdVZrQkVlaHRyc0IycjlEM21HYlJQNEtyd28zS05LTTQ3UUhnamU4aTdZNm5BT2Qtbm9sUDUwTmpYUllQdjQyZkozV2xsR0tHcXQ4R3MwZmxnQ2lCSGZzSXo5OEtpWkdpY2tVcmQyY2hSdnZVQlJDLTZZUGJ1NXk0YlRpcFg1MVctME5FLVhwYy0wYkJWUU50a2RmM1BDUjktT01SekdLZFFRMHphMHp6eldKY2ltbjNnZXlNaTlvUUNWOTBsOC1sWHpLMWU0V19aV04wS0VQeVZGdUQ2MTBuM2lHb3MyVFpVajhTWGw4WmpQYmFET3RzaElzRGFYdjFndEk5V29KMmkteEJPQVZkTmVpd3JlY010NDdRSzE5bFV5UlZmVGpYckNUdVNkUUk4N0pJdy00MDdlNDhWYS04Z1RzdUFRNDZTMDVlanotS2JXOWF4Sjd0d2ktUUozaTB2Q21mcHFDcVdCbUVwOW9EanM2UEE3UjIwaE9VZklURjhyejZHeHRDOXVMbkZrTVpGTjlBWVZpeFpVSm5pazNnY3ZQU01weFNVZnRaRUx0RjBuVlVUbUFZdGgyejRMZkV6SHk2N3N0cWZHR0t2aklwWjAyZ2tPcTRxN3VoVWVBQjBrT3dsdW4yeU40UjN1NTQzLTRXc1ZwMnF3b2JkMW9JaUEtdk1MV1ZhOEdCUE1xMDMzM3EtYkF0LTBQTTZxQ2gwRzYyaWJnNG9INFRlSnFJcHRrWFV4VDc2dWxiX3Z2d2tya2hzYWN4X0RkOUZHRFVBRUc4M05yVk5oTUJIX1BVdlo4NU1LbU1ubWI0UDVLZm9jUHNzbU9UbDk0UWptd2xQNkw4WDlPRTk2LVYyU0U4WVNfLWZPMGdZN3pnQVhsX0cwa2dPTUczS0wtRHI3OU9Sc3hPWXhMLUhtc0FvQXJfVE50SUFybUt2RFFIeXhsSWZTMkMyQTktRjZvekFSS2hjWk9BcnBOczZXS0pYSlJjbGRSNHdBZmtGbHBGVTlZUEEwMU5taXZmTmRkZjdmaEw2aFJFQTNBakRadWkwNGdNZzZ5QmNURHY2RURDZXBrZmxtMGtRRXFtamRXa0Jqd1ZzT0U1VXgyaUlpUjBUb2Y3eXgwZEdzTXBZbEZseUZDa2RDczhSX25uN1JYMU50YWlRR3VfVVVJN0RsWExtUlFJRzVINmFyLS1rbjJqdEpTOXhjbnpkNHl1SEZobnhHb1p5eXFEY1IwcXNwbnpaT2s1TXM2UE1nNjk5S0tQLVN2eDJ0TFRQTk5vR2IzZzBHM3lpZE9Hc1J5Rk9ONkNxTFlaOTFKeFRvUU9lemxld3JUMmVldFpETU14OFBqNW05THNKdWlKN1NqMjhxZEJ3UWZvcGVXWEhwZnlGbUZwV0ZTbTNHN3VCOE1NRlhXTXpvckdZSVdLOGlTenJaZEl5clFaLWFCYU5ETzRFTHJ4SWxKN2hTWVJ6ZnFzQ1RtQ1ZKY1ZlM0NZZGY2eXdPNDdvakYxd2ZCcDFaaXRoOGtqd3VkMU5kR25uODFuZFlieFpiOTJHQWlnUHRmZzVkY3FtYUxlLW1hQW5maHMzSXlxZ0NoQnU5a1h5QjM4OWdPWHJUc18tbFRzSkdiNWxiV2Q2VHlCc1BFNTFVYTFkMXh3bVR3bGd6OUw3RElxVkd4LU9HcG9qOHotbGh5TzdNX1YxekYzV2RJVWU3aUdXOGZsZ3ZfR3ZjWklOdlNGX0otVWlCNG9ka1VLaG9UbkRwQUdzUHh0eXlUcW8xTGdkbTFoSzhoTHhiZVE5RmhjMkgwUTE2T0ZiZ3dhaDM5aW9maUlHZkM2NW1OQTVIUVhJTmd5M01BOXhXRDJ2YW5QQmt3cDBLbzJ5VmVEbG5Vd0d5VVJySmxMSU1yRFQ5MENCTS04bTBMeVR1MWtlTlJrT2ZFb3AwblBZdWFDVF9sMXU2U1p4U3h3SGlTeEY2Z1RTNzJpdW9TT2FkdFNnZU1qUWtrWE5ncm9fN1BCd202a05MWXdJQUZacWVsZ3dScXR3ZUR4Yk0yZHNkVG9PZW9Oc1U3b3Z6eGZMbGc4YUNXeGRNdzVnYnAxRmhncThPczl4RnBwcjFGLWw4WmJ2Sk1ITm4wSTdjTzhia2lFY1A3UTd2NlhtYmJ4QnlUeHI3MktnbTJob2lxOWNUV2hNQVlMSlRYQWhiRlljSlhEaE5LalY4RE5pWmhlSzk2QkdPalc4WUhIdlNIbUxFLWdXSW9Wc2RCbFpqU3lZVmU2V0R3a3pfMlNQeTE3TU9YZExIWmZKV3huY3FMZi1CTHhnU2dEZ1YzZDJTcDVPemZDR3Q1aUJ1OVJWVlRseTJnR05QVjJud0xKendpUmk3YnhaNzN3cVRhNXE2ZWhmNE1CV2M0OUg4UWc5VC1qMVF6WEk0MlRUZXU0VFlXTDlTUFQydWRJejhWYTFKQWFWRkF0a0ZIMnUzaGd6NTdmZVc1YlFfZmNCS01RMktzWFh2T1o2cWRPSkEyUkExZDFvWE1CbDZXbHAwNFp0YnFwaG1pRGxoeEJVc0lzbVJ2S0FjejRnR05MbXotR2tCT29UZGVzc2U4N2tHcmQ4eEtMaThld1JnV3lSZDMxdm44b2ZkcVJVLVZ0Qi13cFpxYUpkRnlPMmNmaVRQMERjcHh3b2pLNUhBYTZpT0xRczBzTmRzVERRSl9YRXc3dTU0VEFPTnM3VWpxV0VyRXlhM1hQQUt5WmI5d3BubWl4TUliREdxbzE5MDBJMlYwTjNyQmNjUGU4TG51RkNTZEFRVDRVSjVEbGVyTnBWTU9LMHQ1VHNBUG8zLTd6MWdvRHFsVnBuM1J5cnZzZ2JsZWIyV1ZFbGY5dXV2VUJyMjY4WXBYQ0t3aEpoNW1WUEhCSThKZjI2Tm10enFTMnF1LXYySlE2Q204TXVLRnhSTGFQbG9jZGl4RU9YX043UXdYRzJTTmlEQmZrMElGdGZ1ZVVKZ2dSNU9WOVIxcWRVVzlOMzVjcGl3X3lWcU9nOFBKZG9vQ3NCZ2lKMlU3aFR5RUhfdGg5MnU0MDZBNVYwOEZMZ25vUktiUHp2OVFxY2VKbnZCWjFCRGtXbU1mOU5WeUVCWW9Pdjc2NDA2YlhVeWtKSG1iT3FadWVyQm01TTFJUXBWSC1faFVrcGJvckM1QTdfc3g4TVgya0pvbjdwNWRNRHBDS0l6dFhYRWVxLVd3M2IwLVFqOVpuLUpCbFc5ejd4R1FNVHJBMmdRRHYtTEVxakMyQ0lTQXhvNTljWnRISW90ZGdfdUpLbnFDZ05WMmRVX2lUZWdHVHNSYk5Eb0hIcGFOZnNfanl2WENUYUNzWkl2czN2VGFReVNmZTl0VUc5RGIxekdBVGFtcDVTdFNXdDhGQVpsTkFNdWR5NkdmMkdUUHgtTG5uUDl4TXVlREw1Y2Vjc2I3M0NzY2tXaWRvVHJtRDN2TERZbjAzd0IydkJla1hScW9FUmxzQU1kemdhdFlMR0hhUVJIczVvZ0x2Y3MwdGI1SHpETk5XdnlkVDdWSVpoc1ZMajlubS1aa25WbW12LWdSbXVOR2tuZ05mRnE0N0NDSDhXaDhqRC1JNDh0R3p2NE83UU1DOFBsWkRxRkQ5T0ktQW1Da1RDTHk3VU9EMFFheUlYSGM2djFsRTBNbHdUOU5pOUJYTC1ZSW1ZT1M1d2c3RTRtSlQ1dkJrSGlQc0F0RndIVlZ3bF9Lb3FqNXV4NVViZjRhTVJLYl9pcDVfNkhEWXRTVk53Wl9nWU9Ld3p0T2FoNXlGSk4tTW1CdEgtOFdIcEtXMjRtYUNNU25CZ1BsUnlkZWpncjg2WDBzdE9EMURMZEppNDFBc3BUMVZCY09fT2ZHUkI2b3VRdUlPUWlXRjJSSW9kTHpVSTZiUVhLZ3ZSak5oLXJUWWpjTEJHbGxSZHhyWm4wSzRpeENmeWhVSVIybnJrTVJEX3pKbk5XYUFtdUQwVFNOazgzdTM0eTJlTG9BS2prVVdmTXhDek9BY3FGRUVGQWc2N2JLNVI5SjJvWEVHaVdteDdrMnFybUpYcGZBVmRpUnlsUmwwNk5DZW1VdUFBODFlaFhoR004WFM0NHlOSWprUGZmNXVRUFhuUl8xVGtkR2dlR1J5NlJIY1ZwdnVseEdNbldIVXpnbWFldUlFX3hfVHFleEx4RURUM3FlMzNSTnJwZzNaZ3l1UGdqWndMM20tbTRXT0dPcVFmTk9vYXZfWWpjTy1JNl9pYnJBNENIbTZUS1dTdHJjRFlJXzBQZTA4ekxRemNYNk9tU2h6ZEFzQzFBM3ZwaUtDZU41ZWk1REdBTU9PQUtSTFhPWklINkFuLUx2NTJ0T3R3c3ZNTUMzam9IYmt6ajItcXc3c2dzZXpMYXFDc0JkOTdLMkVzUHJYRHhzYlJ6Ylg1X25tazVycF9yM1BBVkJxbjg0M0ZUaTFOVERrMC14VXRfRndCcmZlNXFCbVhmbjNoaVpMVmk4cjVMSHJpNHg5c0FuS0pTWUR3cTRac3V1THFLQTgyYzZKc2RDOXJKTm5DRGRvbEJYMXNIbDFfMk9EYi16S3NyQlotaHg2N0tzV3NEU3VBd1oyaXhCb21aM1dnb3RjcWhvaDRDNFBybkEyZDEzV1NkT0hnYWNvT2EyMTFTNGpnM0RVNzRaS2NUNThBeUMtdkFrT2l2ckM0U2JUNFljbl9NQ2dRRmNHUl9nbUlON0dPbTVrT2FQNkJnQzNzamZFQkFjWDhUS3RSeDFiUW13dDMxTFNUZ2IzWTV5aXdQQXF2RzgwbE5Eck5KdFVsYXo4WUtiNUNiRXIxYndpUFBvMmVLTWF2OUZfd3NSUjM2ZVZiU2ZMMVNVNjl5alpDU19YbWRqejJEZi1iVXRWMWVoRlpxODhkcVpjeVBmcFBKUWRFckQ0dXJCUWh0SnQtRzBGUEYwSjNoN1BRMllEb1ROMEdjVWhQLURKRlY4X0V2N04wcUZnajJiTnRMbVRzOEFpWUJHQUNyUGhTRldsdXE5YnBua3hGYUkyYlVEa2hFQUlONEZIWTZQRE5scXJtV0V5MGRIWGFKQ0I0UkRQSTlkLVZuYVhFMjZQY3JtVDVPOEVwMldpY29SRUFKdFkxamtJR3hGQ0NDeHhhU2tMLTMtdlhfYjdBd3p5amtPV2FJUVhGNEE0ZS1CdXlIM25DY1hjUm0xS3BjeEo2aTRNR1k5bldlRWdibllPRWFLNEw3SmpRck81bzFJS0pNUTF1T0w0RjJIekpVN0pQY3RYNVlkQ0k1SUx3UWJpRTJxTFhfM0lxUmlnZ3lMY0dkcmw0aFlzTUJCdGZfX2lCVVZaSVJKV25jZFdWajNyM1hHUEdxa01jRWpOV3B4X2YzMlJYTm1iNUJZNTUxNzRxWWkyaC0yMS1ZdWRlNG5YZlNfQlUxUWJMbnMtNUxmMy1zT2lvM19hV1BZOFN2cW15Y0F4TlkzLWE2dGFfa2ZCQXA0M2VhZWgwYXplcmd1aE4xdkF6U1JnSEdlWV9UUjNnM09Jdzg2emhINy0zMHRScFRiQWlXQTdodEtHWTZVRndMb0RONkd5dFJuRmJwTWFRb0RYU0xld3ZOdWx6MDJKcmdmNE9CdVdmUTdBRWZjSmNIQWV4ZlUyOFM5XzYwbzUza19Ja2dEOXF4NkhBUHc3WXNQYm1VTFRmVnlGdTU1SHpva0lhNGRhUHJJUDEwQmZ6SHh1UT09)
          CM_CERTIFICATE_PASSWORD: Encrypted(Z0FBQUFBQmVuaUliaE9CdkNzTjlZWHFnTG9BSGpsaW1qRWc4b21oUVVRMENjV3Y4M3F2enloUVR5Ym5uY3VkOUYyWHNPblhFbEM1WGlFMm9TeW1rMjJPNHlXX2l2dnBSZmc9PQ==)
          CM_PROVISIONING_PROFILE: Encrypted()
        xcode: latest
        cocoapods: default
      triggering:
        events:
          - push
        branch_patterns:
          - pattern: 'ios_flutter_module'
            include: true
            source: true
      scripts:
        - find . -name "Podfile" -execdir pod install \;
        - keychain initialize
        - |
          # set up provisioning profiles
          PROFILES_HOME="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILES_HOME"
          PROFILE_PATH="$(mktemp "$PROFILES_HOME"/$(uuidgen).mobileprovision)"
          echo ${CM_PROVISIONING_PROFILE} | base64 --decode > $PROFILE_PATH
          echo "Saved provisioning profile $PROFILE_PATH"
        - |
          # set up signing certificate
          echo $CM_CERTIFICATE | base64 --decode > /tmp/certificate.p12
          keychain add-certificates --certificate /tmp/certificate.p12 --certificate-password $CM_CERTIFICATE_PASSWORD
        - cd flutter_module && flutter pub get
        - xcode-project use-profiles
        - xcode-project build-ipa --workspace "ios_using_plugin/IOSUsingPlugin.xcworkspace" --scheme "IOSUsingPlugin"
      artifacts:
        - build/ios/ipa/*.ipa
        - /tmp/xcodebuild_logs/*.log  